function [progressPolygonIndices, progressPolygonsLonLat, ...
    progressTimeStrs, ...
    progressPolygonAreasInAcre, ...
    progressPolygonHarvRatios, ...
    progressOverviewNumsOfFieldsHarvsted, ...
    progressOverviewNumsOfFieldsBeingHarvsted, ...
    progressOverviewAreasInAcreHarvested, ...
    progressOverviewHarvRatios, ...
    progressGpsTimesInS, ...
    videoStartEndGpsTimesInMs, ...
    videoFieldIndices] ...
    = loadHarvProgInfo(folderToLoadProgressInfo)
%LOADHARVPROGINFO Load all harvest progress information log files generated
%by GENPROGRESSPOLYGONS.
%
% Note that we have a typo for "harvested" in
% progressOverviewNumsOfFieldsHarvsted and
% progressOverviewNumsOfFieldsBeingHarvsted when they are saved into the
% .mat file. 
%
% Yaguang Zhang, Purdue, 11/22/2020

%% Scan for all harvest progress log files in the specified folder.
allHarvProgLogFiles = dir(fullfile( ...
    folderToLoadProgressInfo, 'field_*.mat'));
[~, indicesOrderedByName] = natsortfiles({allHarvProgLogFiles.name});
allHarvProgLogFiles = allHarvProgLogFiles(indicesOrderedByName);
numOfHarvProgLogFiles = length(allHarvProgLogFiles);

%% Initialize outputs.
% Cell variables.
[progressPolygonsLonLat, progressTimeStrs] = deal({});
% Vector variables.
[progressPolygonIndices, progressPolygonAreasInAcre, ...
    progressPolygonHarvRatios, ...
    progressOverviewNumsOfFieldsHarvsted, ...
    progressOverviewNumsOfFieldsBeingHarvsted, ...
    progressOverviewAreasInAcreHarvested, ...
    progressOverviewHarvRatios, ...
    progressGpsTimesInS] = deal([]);
% Extra demo video information.
videoFieldIndices = nan(numOfHarvProgLogFiles, 1);
videoStartEndGpsTimesInMs = nan(numOfHarvProgLogFiles, 2);

%% Load data.
% Load data from each log file, clean them by removing empty cell/NaN
% element, and concatenate the results.
for idxF = 1:numOfHarvProgLogFiles
    curHarvProgInfoLogFilename = allHarvProgLogFiles(idxF).name;
    curHarvProgInfo = load(fullfile( ...
        folderToLoadProgressInfo, curHarvProgInfoLogFilename));
    
    % Record the video length info.
    fieldIdxCell = extractBetween( ...
        curHarvProgInfoLogFilename, '_', '_');
    videoFieldIndices(idxF) = str2num(fieldIdxCell{1});
    videoStartEndGpsTimesInMs(idxF, :) = ...
        curHarvProgInfo.videoStartEndGpsTimesInMs;
    
    % Clean the data.
    curBoolsToDiscard = cellfun(@isempty, ...
        curHarvProgInfo.progressPolygonsLonLat);
    newProgPolygonsLonLat = vertcat( ...
        curHarvProgInfo.progressPolygonsLonLat{ ...
        ~curBoolsToDiscard});
    progressPolygonsLonLat ...
        = [progressPolygonsLonLat; ...
        newProgPolygonsLonLat];  %#ok<AGROW>
    
    % Just to be safe, we will double check what will be removed for each
    % variable.
    curNewBoolsToDiscard = cellfun(@isempty, ...
        curHarvProgInfo.progressTimeStrs);
    assert(all(curNewBoolsToDiscard==curBoolsToDiscard), ...
        'The data to be removed do not match with history records!');
    progressTimeStrs ...
        = [progressTimeStrs; ...
        curHarvProgInfo.progressTimeStrs( ...
        ~curBoolsToDiscard)]; %#ok<AGROW>
    
    % Record the field index.
    fieldIdxStr = extractBetween(curHarvProgInfoLogFilename, ...
        'field_', '_');
    assert(length(fieldIdxStr)==1, ...
        'More than one field index is found in the filename!');
    fieldIdx = str2double(fieldIdxStr{1});
    progressPolygonIndices = [progressPolygonIndices; ...
        ones(size(newProgPolygonsLonLat)).*fieldIdx]; %#ok<AGROW>
    
    % Similar steps for vector variables.
    vectVariablesToProcess = {'progressPolygonAreasInAcre', ...
        'progressPolygonHarvRatios', ...
        'progressOverviewNumsOfFieldsHarvsted', ...
        'progressOverviewNumsOfFieldsBeingHarvsted', ...
        'progressOverviewAreasInAcreHarvested', ...
        'progressOverviewHarvRatios', ...
        'progressGpsTimesInS'};
    for idxVecVar = 1:length(vectVariablesToProcess)
        curVecVar = vectVariablesToProcess{idxVecVar};
        
        curNewBoolsToDiscard = eval(['isnan(curHarvProgInfo.', ...
            curVecVar, ')']);
        assert(all(curNewBoolsToDiscard==curBoolsToDiscard), ...
            'The data to be removed do not match with history records!');
        
        eval([curVecVar, '= [', curVecVar, ';', ...
            'curHarvProgInfo.', curVecVar, '(~curBoolsToDiscard)];']);
    end
end

end
% EOF