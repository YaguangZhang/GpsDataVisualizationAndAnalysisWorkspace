%PLOTFORGENMOVIEBYGPSTIME Update the frame for genMovieByGpsTime.m.
%
% Useful inputs:
%       - hFig
%         Where to update the frame.
%       - currentGpsTime
%         The time to show in the frame.
%       - gpsTimeRangesForFiles
%         The GPS time ranges for all files considered.
% Useful outputs:
%       - hFigElements
%         Handles to the elements plotted.
% Yaguang Zhang, Purdue, 09/16/2015

% Only files with gpsTimeRange covering currentGpsTime are valid.
indicesFilesToShow = find(gpsTimeRangesForFiles(:,1) <= currentGpsTime ...
    & gpsTimeRangesForFiles(:,2) >= currentGpsTime);
filesToShow = files(indicesFilesToShow);
indicesCurrentSample = cell(length(filesToShow),1);
gpsTimeDiffCurrentSample = inf(length(filesToShow),1);

% Record date and time for the title.
dateAndTime = cell(length(filesToShow),1);

% Make sure we are working on the movie figure.
set(0,'CurrentFigure',hFig);

% Handles to the elements plotted later.
hFigElements = cell(length(filesToShow),1);

% Plot tracks covered and current locations for currently visible
% vehiclesS.
hold on;
for idxFileToShow = 1:length(filesToShow)
    % Find the current sample.
    
    % Possible indices for the current sample for this file.
    indicesPossCurSample = {[],[]};
    indicesPossCurSample{1} = find(filesToShow(idxFileToShow).gpsTime <= currentGpsTime, ...
        1,'first');
    indicesPossCurSample{2} = find(filesToShow(idxFileToShow).gpsTime >= currentGpsTime, ...
        1,'first');
    % Find the closest sample in time.
    possTimeDiff = [currentGpsTime - indicesPossCurSample{1}, ...
        indicesPossCurSample{2} - currentGpsTime];
    [minPossTimeDiff, indexPossCurSampleToUse] = min(possTimeDiff);
    indexCurSample = indicesPossCurSample{indexPossCurSampleToUse};
    indicesCurrentSample{idxFileToShow} = indexCurSample;
    gpsTimeDiffCurrentSample(idxFileToShow) = minPossTimeDiff;
    dateAndTime{idxFileToShow} = filesToShow(idxFileToShow).time{indexCurSample};
    
    % Covered tracks.
    hFigElements{idxFileToShow}(end+1) = ...
        plot(filesToShow(idxFileToShow).lon(1:indexCurSample), ...
        filesToShow(idxFileToShow).lat(1:indexCurSample), ...
        'Color', colorsVehicle{strcmpi(typesColorVeh, filesToShow(idxFileToShow).type)}, ...
        'LineWidth', 0.5, ... % Default LineWidth = 0.5 point.
        'LineStyle', '-' ...
        );
end

VEH_CIRCLE_PLOT_SIZE = 9;
for idxFileToShow = 1:length(filesToShow)
    % Plot markers. First the circle edge.
    hFigElements{idxFileToShow}(end+1) = ...
        plot(...
        filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ...
        filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ...
        'Marker', 'o',...
        'LineWidth', 2, 'MarkerSize', VEH_CIRCLE_PLOT_SIZE, ...
        'MarkerEdgeColor', COLOR.HIGH_LIGHT, ...
        'MarkerFaceColor', colorsVehicle{strcmpi(typesColorVeh, filesToShow(idxFileToShow).type)} ...
        );
    % Then the cross inside.
    hFigElements{idxFileToShow}(end+1)  = ...
        plot(...
        filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ...
        filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ...
        'Marker', 'x',...
        'LineWidth', 1, 'MarkerSize', VEH_CIRCLE_PLOT_SIZE, ...
        'MarkerEdgeColor', COLOR.HIGH_LIGHT ...
        );
end

if FLAG_SHOW_VEH_ACTIVITIES
    NUM_LABEL_FONT_SIZE = 7;
    NUM_LABEL_HOR_ALIGNMENT = 'center';
    NUM_LABEL_VER_ALIGNMENT = 'middle';
    % Plot markers for showing current activities of each vehicle.
    for idxFileToShow = 1:length(filesToShow)
        % Show the vehicle number labels if necessary.
        if FLAG_SHOW_VEH_LABELS
            hFigElements{idxFileToShow}(end+1)  = ...
                text( ...
                filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ...
                filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ...
                num2str(indicesFilesToShow(idxFileToShow)), ...
                'FontSize', NUM_LABEL_FONT_SIZE, ...
                'FontWeight', 'bold', ...
                'HorizontalAlignment', NUM_LABEL_HOR_ALIGNMENT, ...
                'VerticalAlignment', NUM_LABEL_VER_ALIGNMENT, ...
                'Color', 'white', ...
                'BackgroundColor', 'none');
            hFigElements{idxFileToShow}(end+1)  = ...
                text( ...
                filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ...
                filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ...
                num2str(indicesFilesToShow(idxFileToShow)), ...
                'FontSize', NUM_LABEL_FONT_SIZE, ...
                'FontWeight', 'normal', ...
                'HorizontalAlignment', NUM_LABEL_HOR_ALIGNMENT, ...
                'VerticalAlignment', NUM_LABEL_VER_ALIGNMENT, ...
                'Color', 'black', ...
                'BackgroundColor', 'none');
        end
        
        % For combines, need to show whether it's harvesting.
        if strcmpi(filesToShow(idxFileToShow).type,'Combine')
            if statesByDist{indicesFilesToShow(idxFileToShow)}(indicesCurrentSample{idxFileToShow},1) == 0
                % loadFrom == 0, i.e. it's harvesting.
                hFigElements{idxFileToShow}(end+1)  = ...
                    text( ...
                    filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ...
                    filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ...
                    'H', ...
                    'FontWeight', 'bold', ...
                    'HorizontalAlignment', 'left', ...
                    'VerticalAlignment', 'bottom', ...
                    'Color', 'white', ...
                    'BackgroundColor', 'none');
            end
        end
        
        % For all vehicles, need to show the unloading activity and if it's
        % unloading, to which vehicle it's unloading. We will draw a
        % colored line segment to show that.
        indexDestVeh = statesByDist{indicesFilesToShow(idxFileToShow)}(indicesCurrentSample{idxFileToShow},2); % loadTo
        if ~isnan(indexDestVeh) && sum(indicesFilesToShow == indexDestVeh)>0
            % loadTo isn't NaN, i.e. it's unloading.
            
            % Find the currentSample for the destination vehicle.
            currentSampleForDestVeh = ...
                indicesCurrentSample{indicesFilesToShow == indexDestVeh}; %#ok<FNDSB>
            
            % Draw a colored line to indicate the unloading direction.
            hFigElements{idxFileToShow}(end+1) = plot( ...
                [filesToShow(idxFileToShow).lon(indicesCurrentSample{idxFileToShow}), ... x1
                files(indexDestVeh).lon(currentSampleForDestVeh)], ... x2
                [filesToShow(idxFileToShow).lat(indicesCurrentSample{idxFileToShow}), ... y1
                files(indexDestVeh).lat(currentSampleForDestVeh)], ... y2
                'Color',colorsVehicle{strcmpi(typesColorVeh, filesToShow(idxFileToShow).type)}, ...
                'LineWidth',3 ...
                );
            
            % Also draw a dot at the destination vehicle.
            hFigElements{idxFileToShow}(end+1) = plot( ...
                files(indexDestVeh).lon(currentSampleForDestVeh), ... x2
                files(indexDestVeh).lat(currentSampleForDestVeh), ... y2
                'Marker', 'o',...
                'LineWidth', 2, 'MarkerSize', 5, ...
                'MarkerEdgeColor', colorsVehicle{strcmpi(typesColorVeh, filesToShow(idxFileToShow).type)}, ...
                'MarkerFaceColor', colorsVehicle{strcmpi(typesColorVeh, files(indexDestVeh).type)} ...
                );
            
        end
    end
end

[~, indexDateAndTime] = min(gpsTimeDiffCurrentSample);
% Use current GPS time as the title.
if exist('currentFileForGenMovie', 'var')
    % Update: use only the Movie GPS time for the state collector.
    title({...
        ['movieGpsTime: ', num2str(floor(currentGpsTime-timeRangeMovies(currentFileForGenMovie,1))), '   (', dateAndTime{indexDateAndTime}(6:end), ')']...
        });
%     title({...
%         ['movieGpsTime: ', num2str(floor(currentGpsTime-timeRangeMovies(currentFileForGenMovie,1))), 32 ...
%         'currentGpsTime: ', num2str(floor(currentGpsTime)), ' (', dateAndTime{indexDateAndTime}, ')']; ...
%         ['[lonMin, lonMax, latMin, latMax] = [',regexprep(num2str(axis),' +',', '),']']...
%         });
else
    title({...
        ['currentGpsTime: ', num2str(floor(currentGpsTime)), ' (', dateAndTime{indexDateAndTime}, ')']; ...
        ['[lonMin, lonMax, latMin, latMax] = [',regexprep(num2str(axis),' +',', '),']']...
        });
end

% To make sure the figure is updated.
drawnow;

% EOF